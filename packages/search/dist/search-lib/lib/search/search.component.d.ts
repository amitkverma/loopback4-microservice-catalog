import { ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { Configuration } from '../lib-configuration';
import { Subject } from 'rxjs';
import { ControlValueAccessor } from '@angular/forms';
import { ISearchService, IModel, ISearchQuery, IReturnType, RecentSearchEvent, TypeEvent, ItemClickedEvent } from '../types';
export declare class SearchComponent<T extends IReturnType> implements OnInit, OnDestroy, ControlValueAccessor {
    private readonly searchService;
    private readonly platformId;
    searchBoxInput: string;
    suggestionsDisplay: boolean;
    categoryDisplay: boolean;
    suggestions: T[];
    relevantSuggestions: T[];
    recentSearches: ISearchQuery[];
    category: IModel | 'All';
    observableForSearchRequest: Subject<{
        input: string;
        event: Event;
    }>;
    config: Configuration<T>;
    clicked: EventEmitter<ItemClickedEvent<T>>;
    searched: EventEmitter<RecentSearchEvent>;
    onChange: (value: string | undefined) => void;
    onTouched: () => void;
    disabled: boolean;
    searchInputElement: ElementRef;
    constructor(searchService: ISearchService<T>, platformId: object);
    ngOnInit(): void;
    writeValue(value: string): void;
    registerOnChange(fn: (value: string | undefined) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState?(isDisabled: boolean): void;
    getSuggestions(eventValue: TypeEvent): void;
    getRecentSearches(): void;
    hitSearchApi(event: Event): void;
    populateValue(suggestion: T, event: MouseEvent): void;
    populateValueRecentSearch(recentSearch: ISearchQuery, event: MouseEvent): void;
    fetchModelImageUrlFromSuggestion(suggestion: T): string | undefined;
    getSuggestionsFromModelName(modelName: string): boolean;
    boldString(str: T[keyof T] | string, substr: string): string;
    hideSuggestions(): void;
    showSuggestions(): void;
    focusInput(): void;
    setCategory(category: 'All' | IModel, event: MouseEvent): void;
    showCategory(): void;
    hideCategory(): void;
    resetInput(): void;
    ngOnDestroy(): void;
    _categoryToSourceName(category: 'All' | IModel): string[];
}
