{"version":3,"file":"sourceloop-search-client.js","sources":["../../../projects/search-lib/src/lib/types.ts","../../../projects/search-lib/src/lib/search/search.component.ts","../../../projects/search-lib/src/lib/search-lib.module.ts","../../../projects/search-lib/src/lib/lib-configuration.ts","../../../projects/search-lib/src/public-api.ts","../../../projects/search-lib/src/sourceloop-search-client.ts"],"sourcesContent":["import {InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nexport interface ISearchQuery {\n  match: string;\n  limit: number | null;\n  order: string | null;\n  limitByType: boolean | null;\n  offset: number | null;\n  sources: string[] | null;\n}\nexport interface IModel {\n  name: string;\n  displayName: string;\n  imageUrl?: string;\n}\nexport interface IReturnType {\n  rank: number;\n  source: string;\n}\nexport interface IDefaultReturnType extends IReturnType {\n  name: string;\n  description: string;\n}\n\nexport interface ISearchService<T extends IReturnType> {\n  searchApiRequest(\n    requestParameters: ISearchQuery,\n    saveInRecents: boolean,\n  ): Observable<T[]>;\n  recentSearchApiRequest?(): Observable<ISearchQuery[]>;\n}\n\n// cant use T extends IReturnType here\nexport const SEARCH_SERVICE_TOKEN: InjectionToken<ISearchService<IReturnType>> =\n  new InjectionToken<ISearchService<IReturnType>>('Search_Service_Token');\n\nexport type RecentSearchEvent = {\n  event: KeyboardEvent | Event;\n  keyword: string;\n  category: 'All' | IModel;\n};\n\nexport type ItemClickedEvent<T> = {\n  event: MouseEvent;\n  item: T;\n};\n\nexport type TypeEvent = {\n  event: Event;\n  input: string;\n};\n// IRequestParameters default values\nexport const DEFAULT_LIMIT = 20;\nexport const DEFAULT_LIMIT_TYPE = false;\nexport const DEFAULT_ORDER = [];\nexport const DEBOUNCE_TIME = 1000;\nexport const DEFAULT_OFFSET = 0;\nexport const DEFAULT_SAVE_IN_RECENTS = true;\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  PLATFORM_ID,\n  ViewChild,\n} from '@angular/core';\nimport {Configuration} from '../lib-configuration';\nimport {Subject} from 'rxjs';\nimport {debounceTime, tap} from 'rxjs/operators';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  ISearchService,\n  IModel,\n  ISearchQuery,\n  SEARCH_SERVICE_TOKEN,\n  DEBOUNCE_TIME,\n  DEFAULT_LIMIT,\n  DEFAULT_LIMIT_TYPE,\n  DEFAULT_OFFSET,\n  DEFAULT_SAVE_IN_RECENTS,\n  DEFAULT_ORDER,\n  IReturnType,\n  RecentSearchEvent,\n  TypeEvent,\n  ItemClickedEvent,\n} from '../types';\nimport {isPlatformBrowser} from '@angular/common';\n\n@Component({\n  selector: 'sourceloop-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: SearchComponent,\n      multi: true,\n    },\n  ],\n})\nexport class SearchComponent<T extends IReturnType>\n  implements OnInit, OnDestroy, ControlValueAccessor\n{\n  searchBoxInput = '';\n  suggestionsDisplay = false;\n  categoryDisplay = false;\n  suggestions: T[] = [];\n  relevantSuggestions: T[] = [];\n  recentSearches: ISearchQuery[] = [];\n  category: IModel | 'All' = 'All';\n  observableForSearchRequest = new Subject<{input: string; event: Event}>();\n  @Input() config!: Configuration<T>;\n  // emitted when user clicks one of the suggested results (including recent search sugestions)\n  @Output() clicked = new EventEmitter<ItemClickedEvent<T>>();\n  @Output() searched = new EventEmitter<RecentSearchEvent>();\n  /* emitted when user makes search request (including recent search requests & requests made on change in category from dropdown)\n  In case of recent search Array of recent Search request result is emitted */\n\n  onChange!: (value: string | undefined) => void;\n  onTouched!: () => void;\n  disabled = false;\n\n  @ViewChild('searchInput') public searchInputElement!: ElementRef;\n\n  constructor(\n    @Inject(SEARCH_SERVICE_TOKEN)\n    private readonly searchService: ISearchService<T>,\n    @Inject(PLATFORM_ID) private readonly platformId: object,\n  ) {}\n\n  ngOnInit(): void {\n    this.observableForSearchRequest\n      .pipe(\n        tap(v => (this.suggestions = [])),\n        debounceTime(DEBOUNCE_TIME),\n      )\n      .subscribe((value: TypeEvent) => {\n        this.searched.emit({\n          event: value.event,\n          keyword: value.input,\n          category: this.category,\n        });\n        this.getSuggestions(value);\n      });\n  }\n\n  // ControlValueAccessor Implementation\n  writeValue(value: string): void {\n    this.searchBoxInput = value;\n  }\n  // When the value in the UI is changed, this method will invoke a callback function\n  registerOnChange(fn: (value: string | undefined) => void): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  getSuggestions(eventValue: TypeEvent) {\n    const order = this.config.order ?? DEFAULT_ORDER;\n    let orderString = '';\n    order.forEach(preference => (orderString = `${orderString}${preference} `));\n\n    let saveInRecents = this.config.saveInRecents ?? DEFAULT_SAVE_IN_RECENTS;\n    if (this.config.saveInRecents && this.config.saveInRecentsOnlyOnEnter) {\n      if (\n        (eventValue.event instanceof KeyboardEvent &&\n          eventValue.event.key === 'Enter') ||\n        (eventValue.event instanceof Event &&\n          eventValue.event.type === 'change')\n      ) {\n        saveInRecents = true; // save in recents only on enter or change in category\n      } else {\n        // do not save in recent search on typing\n        saveInRecents = false;\n      }\n    }\n    /* need to put default value here and not in contructor\n    because sonar was giving code smell with definite assertion as all these parameters are optional */\n    const requestParameters: ISearchQuery = {\n      match: eventValue.input,\n      sources: this._categoryToSourceName(this.category),\n      limit: this.config.limit ?? DEFAULT_LIMIT,\n      limitByType: this.config.limitByType ?? DEFAULT_LIMIT_TYPE,\n      order: orderString,\n      offset: this.config.offset ?? DEFAULT_OFFSET,\n    };\n\n    this.searchService\n      .searchApiRequest(requestParameters, saveInRecents)\n      .subscribe(\n        (value: T[]) => {\n          this.suggestions = value;\n        },\n        (_error: Error) => {\n          this.suggestions = [];\n        },\n      );\n  }\n  getRecentSearches() {\n    if (\n      !this.config.hideRecentSearch &&\n      this.searchService.recentSearchApiRequest\n    ) {\n      this.searchService.recentSearchApiRequest().subscribe(\n        (value: ISearchQuery[]) => {\n          this.recentSearches = value;\n        },\n        (_error: Error) => {\n          this.recentSearches = [];\n        },\n      );\n    }\n  }\n\n  // event can be KeyBoardEvent or Event of type 'change' fired on change in value of drop down for category\n  hitSearchApi(event: Event) {\n    // this will happen only in case user searches something and then erases it, we need to update recent search\n    if (!this.searchBoxInput) {\n      this.suggestions = [];\n      this.getRecentSearches();\n      return;\n    }\n\n    // no debounce time needed in case of searchOnlyOnEnter\n    if (this.config.searchOnlyOnEnter) {\n      if (\n        (event instanceof KeyboardEvent && event.key === 'Enter') ||\n        (event instanceof Event && event.type === 'change')\n      ) {\n        this.getSuggestions({input: this.searchBoxInput, event});\n      }\n      return;\n    }\n\n    // no debounce time needed in case of change in category\n    if (event instanceof KeyboardEvent === false && event.type === 'change') {\n      this.getSuggestions({input: this.searchBoxInput, event});\n      return;\n    }\n\n    this.observableForSearchRequest.next({\n      input: this.searchBoxInput,\n      event,\n    });\n  }\n\n  populateValue(suggestion: T, event: MouseEvent) {\n    const value = suggestion[\n      this.config.displayPropertyName\n    ] as unknown as string; // converted to string to assign value to searchBoxInput\n    this.searchBoxInput = value;\n    this.suggestionsDisplay = false;\n    // ngModelChange doesn't detect change in value when populated from outside, hence calling manually\n    this.onChange(this.searchBoxInput);\n    // need to do this to show more search options for selected suggestion - just in case user reopens search input\n    this.getSuggestions({input: this.searchBoxInput, event});\n    this.clicked.emit({item: suggestion, event});\n  }\n  populateValueRecentSearch(recentSearch: ISearchQuery, event: MouseEvent) {\n    event.stopPropagation();\n    event.preventDefault();\n    const value = recentSearch['match'];\n    this.searchBoxInput = value;\n    this.suggestionsDisplay = false;\n    this.onChange(this.searchBoxInput);\n    // need to do this to show more search options for selected suggestion - just in case user reopens search input\n    this.getSuggestions({input: this.searchBoxInput, event});\n    this.focusInput();\n    this.showSuggestions();\n  }\n\n  fetchModelImageUrlFromSuggestion(suggestion: T) {\n    const modelName = suggestion[\n      'source' as unknown as keyof T\n    ] as unknown as string;\n    let url: string | undefined;\n    this.config.models.forEach((model, i) => {\n      if (model.name === modelName && model.imageUrl) {\n        url = model.imageUrl;\n      }\n    });\n    return url;\n  }\n\n  // also returns true if there are any suggestions related to the model\n  getSuggestionsFromModelName(modelName: string) {\n    this.relevantSuggestions = [];\n    this.suggestions.forEach(suggestion => {\n      const sourceModelName = suggestion[\n        'source' as keyof T\n      ] as unknown as string;\n      if (sourceModelName === modelName) {\n        this.relevantSuggestions.push(suggestion);\n      }\n    });\n    if (this.relevantSuggestions.length) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  boldString(str: T[keyof T] | string, substr: string) {\n    const strRegExp = new RegExp(`(${substr})`, 'gi');\n    const stringToMakeBold: string = str as unknown as string;\n    return stringToMakeBold.replace(strRegExp, `<b>$1</b>`);\n  }\n\n  hideSuggestions() {\n    this.suggestionsDisplay = false;\n    this.onTouched();\n  }\n\n  showSuggestions() {\n    this.suggestionsDisplay = true;\n    this.getRecentSearches();\n  }\n\n  focusInput() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.searchInputElement.nativeElement.focus();\n    }\n  }\n\n  setCategory(category: 'All' | IModel, event: MouseEvent) {\n    this.category = category;\n    this.categoryDisplay = false;\n    if (this.searchBoxInput) {\n      this.hitSearchApi(event);\n      this.focusInput();\n      this.showSuggestions();\n    }\n  }\n\n  showCategory() {\n    this.categoryDisplay = !this.categoryDisplay;\n  }\n\n  hideCategory() {\n    this.categoryDisplay = false;\n  }\n\n  resetInput() {\n    this.searchBoxInput = '';\n    this.suggestionsDisplay = true;\n    this.focusInput();\n    // ngModelChange doesn't detect change in value when populated from outside, hence calling manually\n    this.onChange(this.searchBoxInput);\n    this.getRecentSearches();\n  }\n  ngOnDestroy() {\n    this.observableForSearchRequest.unsubscribe();\n  }\n\n  _categoryToSourceName(category: 'All' | IModel) {\n    if (category === 'All') {\n      return [];\n    } else {\n      return [category.name];\n    }\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {SearchComponent} from './search/search.component';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {HttpClientModule} from '@angular/common/http';\n\n@NgModule({\n  declarations: [SearchComponent],\n  imports: [CommonModule, FormsModule, HttpClientModule],\n  exports: [SearchComponent],\n})\nexport class SearchLibModule {}\n","import {IDefaultReturnType, IModel} from './types';\nexport class Configuration<T = IDefaultReturnType> {\n  /** property to be displayed in the results */\n  displayPropertyName: keyof T;\n  /** list of model configuration to be render and categorize search results */\n  models: IModel[];\n  /** max number of results (based on limitByType option) */\n  limit?: number;\n  /** apply limit on individual models, or on overall results */\n  limitByType?: boolean;\n  /** apply a particular ordering on results */\n  order?: string[];\n  /** offset for results in case limit is used */\n  offset?: number;\n  /** save the search query in recent history */\n  saveInRecents?: boolean;\n  /** a placeholder to display in the search box */\n  placeholder?: string;\n  /** categorize results on the basis of models provided */\n  categorizeResults?: boolean;\n  /** hides the recent search list */\n  hideRecentSearch?: boolean;\n  /** hide the category selection button */\n  hideCategorizeButton?: boolean;\n  /** save value in recent search only on enter or change in category, if false, also saved on typing */\n  saveInRecentsOnlyOnEnter?: boolean;\n  /** search only on enter key or when category is changed */\n  searchOnlyOnEnter?: boolean;\n\n  constructor(d: Configuration<T>) {\n    if (\n      d.categorizeResults === false &&\n      (d.hideCategorizeButton === false || d.hideCategorizeButton === undefined)\n    ) {\n      throw new Error(\n        'You must provide hideCategorizeButton:true as categorizeResults is false',\n      );\n    }\n    if (d.saveInRecents === false && d.saveInRecentsOnlyOnEnter === true) {\n      throw new Error(\n        'You must provide saveInRecents:true for saveInRecentsOnlyOnEnter:true',\n      );\n    }\n    this.displayPropertyName = d.displayPropertyName;\n    this.models = d.models;\n\n    this.placeholder = d.placeholder ?? 'Search';\n    /* IRequestParameters - will be given default values before call is made in case undefined/null,\n    otherwise there ! is used on which sonar gives code smell */\n    this.limit = d.limit;\n    this.limitByType = d.limitByType;\n    this.order = d.order;\n    this.offset = d.offset;\n    this.saveInRecents = d.saveInRecents;\n\n    this.categorizeResults = d.categorizeResults ?? true;\n    this.hideRecentSearch = d.hideRecentSearch ?? false;\n    this.hideCategorizeButton = d.hideCategorizeButton ?? false;\n    this.saveInRecentsOnlyOnEnter = d.saveInRecentsOnlyOnEnter ?? false;\n    this.searchOnlyOnEnter = d.searchOnlyOnEnter ?? false;\n  }\n}\n","/*\n * Public API Surface of my-lib\n */\n\nexport * from './lib/search-lib.module';\nexport * from './lib/search/search.component';\nexport * from './lib/lib-configuration';\nexport * from './lib/types';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}